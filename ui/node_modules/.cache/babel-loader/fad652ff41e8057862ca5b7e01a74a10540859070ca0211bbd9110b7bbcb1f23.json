{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dgtow\\\\intelligent-policy-engine\\\\aicomplyr-intelligence\\\\ui\\\\src\\\\contexts\\\\UserContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nexport const useUser = () => {\n  _s();\n  const context = useContext(UserContext);\n  if (!context) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n};\n_s(useUser, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const UserProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [role, setRole] = useState('enterprise');\n  const [workflow, setWorkflow] = useState(null);\n  const [permissions, setPermissions] = useState([]);\n  const [organizations, setOrganizations] = useState([]);\n  const [currentOrganization, setCurrentOrganization] = useState(null);\n  useEffect(() => {\n    // Initialize user context\n    const initializeUser = async () => {\n      try {\n        // Mock user data - in real app, this would come from Auth0 or similar\n        const mockUser = {\n          id: 'user_123',\n          email: 'admin@aicomplyr.io',\n          name: 'Enterprise Admin',\n          role: 'enterprise',\n          permissions: ['audit:read', 'policy:write', 'user:read', 'org:read', 'system:admin', 'review_overrides', 'agency:invite', 'policy:read'],\n          organizations: [{\n            id: 'org_456',\n            name: 'PharmaCorp Inc.',\n            type: 'enterprise',\n            role: 'admin'\n          }]\n        };\n        setUser(mockUser);\n        setRole(mockUser.role);\n        setPermissions(mockUser.permissions);\n        setOrganizations(mockUser.organizations);\n        setCurrentOrganization(mockUser.organizations[0]);\n        console.log('👤 User context initialized:', mockUser);\n      } catch (error) {\n        console.error('❌ Error initializing user context:', error);\n      }\n    };\n    initializeUser();\n  }, []);\n  const hasPermission = permission => {\n    return permissions.includes(permission);\n  };\n  const hasRole = userRole => {\n    return role === userRole;\n  };\n  const switchOrganization = orgId => {\n    const org = organizations.find(o => o.id === orgId);\n    if (org) {\n      setCurrentOrganization(org);\n      console.log(`🏢 Switched to organization: ${org.name}`);\n    }\n  };\n  const updateWorkflow = workflowData => {\n    setWorkflow(workflowData);\n    console.log('🔄 Workflow updated:', workflowData);\n  };\n  const clearWorkflow = () => {\n    setWorkflow(null);\n    console.log('🔄 Workflow cleared');\n  };\n  const value = {\n    user,\n    role,\n    setRole,\n    workflow,\n    setWorkflow: updateWorkflow,\n    clearWorkflow,\n    permissions,\n    organizations,\n    currentOrganization,\n    switchOrganization,\n    hasPermission,\n    hasRole\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s2(UserProvider, \"mPzc/FRB+1hwEalK4MTmrKq2s9M=\");\n_c = UserProvider;\nexport { UserContext };\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","UserContext","useUser","_s","context","Error","UserProvider","children","_s2","user","setUser","role","setRole","workflow","setWorkflow","permissions","setPermissions","organizations","setOrganizations","currentOrganization","setCurrentOrganization","initializeUser","mockUser","id","email","name","type","console","log","error","hasPermission","permission","includes","hasRole","userRole","switchOrganization","orgId","org","find","o","updateWorkflow","workflowData","clearWorkflow","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dgtow/intelligent-policy-engine/aicomplyr-intelligence/ui/src/contexts/UserContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst UserContext = createContext();\r\n\r\nexport const useUser = () => {\r\n  const context = useContext(UserContext);\r\n  if (!context) {\r\n    throw new Error('useUser must be used within a UserProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const UserProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [role, setRole] = useState('enterprise');\r\n  const [workflow, setWorkflow] = useState(null);\r\n  const [permissions, setPermissions] = useState([]);\r\n  const [organizations, setOrganizations] = useState([]);\r\n  const [currentOrganization, setCurrentOrganization] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Initialize user context\r\n    const initializeUser = async () => {\r\n      try {\r\n        // Mock user data - in real app, this would come from Auth0 or similar\r\n        const mockUser = {\r\n          id: 'user_123',\r\n          email: 'admin@aicomplyr.io',\r\n          name: 'Enterprise Admin',\r\n          role: 'enterprise',\r\n          permissions: [\r\n            'audit:read',\r\n            'policy:write',\r\n            'user:read',\r\n            'org:read',\r\n            'system:admin',\r\n            'review_overrides',\r\n            'agency:invite',\r\n            'policy:read'\r\n          ],\r\n          organizations: [\r\n            {\r\n              id: 'org_456',\r\n              name: 'PharmaCorp Inc.',\r\n              type: 'enterprise',\r\n              role: 'admin'\r\n            }\r\n          ]\r\n        };\r\n\r\n        setUser(mockUser);\r\n        setRole(mockUser.role);\r\n        setPermissions(mockUser.permissions);\r\n        setOrganizations(mockUser.organizations);\r\n        setCurrentOrganization(mockUser.organizations[0]);\r\n\r\n        console.log('👤 User context initialized:', mockUser);\r\n      } catch (error) {\r\n        console.error('❌ Error initializing user context:', error);\r\n      }\r\n    };\r\n\r\n    initializeUser();\r\n  }, []);\r\n\r\n  const hasPermission = (permission) => {\r\n    return permissions.includes(permission);\r\n  };\r\n\r\n  const hasRole = (userRole) => {\r\n    return role === userRole;\r\n  };\r\n\r\n  const switchOrganization = (orgId) => {\r\n    const org = organizations.find(o => o.id === orgId);\r\n    if (org) {\r\n      setCurrentOrganization(org);\r\n      console.log(`🏢 Switched to organization: ${org.name}`);\r\n    }\r\n  };\r\n\r\n  const updateWorkflow = (workflowData) => {\r\n    setWorkflow(workflowData);\r\n    console.log('🔄 Workflow updated:', workflowData);\r\n  };\r\n\r\n  const clearWorkflow = () => {\r\n    setWorkflow(null);\r\n    console.log('🔄 Workflow cleared');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    role,\r\n    setRole,\r\n    workflow,\r\n    setWorkflow: updateWorkflow,\r\n    clearWorkflow,\r\n    permissions,\r\n    organizations,\r\n    currentOrganization,\r\n    switchOrganization,\r\n    hasPermission,\r\n    hasRole\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={value}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport { UserContext }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}