{"ast":null,"code":"// API Service Layer for Context Management\nconst API_BASE=process.env.REACT_APP_API_URL||'http://localhost:3000/api';// Authentication helper\nconst getAuthToken=()=>{return localStorage.getItem('aicomplyr_token')||sessionStorage.getItem('aicomplyr_token');};// API request helper with authentication\nconst apiRequest=async function(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const token=getAuthToken();const config={headers:{'Content-Type':'application/json',...(token&&{'Authorization':`Bearer ${token}`}),...options.headers},...options};const response=await fetch(`${API_BASE}${endpoint}`,config);if(!response.ok){if(response.status===401){// Handle token refresh or redirect to login\nlocalStorage.removeItem('aicomplyr_token');sessionStorage.removeItem('aicomplyr_token');window.location.href='/login';throw new Error('Authentication required');}const errorData=await response.json().catch(()=>({}));throw new Error(errorData.message||`HTTP ${response.status}: ${response.statusText}`);}return response.json();};// Context Management API\nexport const contextApi={// Fetch all contexts for current user\ngetUserContexts:async()=>{return apiRequest('/user/contexts');},// Switch to a different context\nswitchContext:async contextId=>{return apiRequest('/user/context/switch',{method:'POST',body:JSON.stringify({contextId})});},// Get dashboard data for current context\ngetDashboardData:async(contextType,contextId)=>{return apiRequest(`/dashboard/${contextType}/${contextId}`);},// Get notifications for current context\ngetNotifications:async function(contextId){let filter=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'all';return apiRequest(`/notifications/${contextId}?filter=${filter}`);},// Mark notification as read\nmarkNotificationRead:async notificationId=>{return apiRequest(`/notifications/${notificationId}/read`,{method:'PUT'});},// Mark all notifications as read\nmarkAllNotificationsRead:async contextId=>{return apiRequest(`/notifications/${contextId}/read-all`,{method:'PUT'});},// Get enterprise data\ngetEnterpriseData:async enterpriseId=>{return apiRequest(`/enterprises/${enterpriseId}`);},// Get agency seat data\ngetAgencySeatData:async seatId=>{return apiRequest(`/agency-seats/${seatId}`);},// Get user profile\ngetUserProfile:async()=>{return apiRequest('/user/profile');},// Update user profile\nupdateUserProfile:async profileData=>{return apiRequest('/user/profile',{method:'PUT',body:JSON.stringify(profileData)});},// Get compliance metrics\ngetComplianceMetrics:async contextId=>{return apiRequest(`/compliance/metrics/${contextId}`);},// Get audit events\ngetAuditEvents:async function(contextId){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;return apiRequest(`/audit/events/${contextId}?limit=${limit}`);},// Get policy data\ngetPolicies:async contextId=>{return apiRequest(`/policies/${contextId}`);},// Get submissions\ngetSubmissions:async function(contextId){let status=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'all';return apiRequest(`/submissions/${contextId}?status=${status}`);},// Get tool requests\ngetToolRequests:async contextId=>{return apiRequest(`/tool-requests/${contextId}`);},// Seat Management API endpoints\n// Get all seats for an enterprise\ngetEnterpriseSeats:async enterpriseId=>{return apiRequest(`/enterprise/${enterpriseId}/seats`);},// Create a new seat\ncreateSeat:async(enterpriseId,seatData)=>{return apiRequest(`/enterprise/${enterpriseId}/seats`,{method:'POST',body:JSON.stringify(seatData)});},// Update a seat\nupdateSeat:async(enterpriseId,seatId,seatData)=>{return apiRequest(`/enterprise/${enterpriseId}/seats/${seatId}`,{method:'PUT',body:JSON.stringify(seatData)});},// Delete a seat\ndeleteSeat:async(enterpriseId,seatId)=>{return apiRequest(`/enterprise/${enterpriseId}/seats/${seatId}`,{method:'DELETE'});},// Bulk policy assignment to seats\nbulkAssignPolicies:async(enterpriseId,seatIds,policyIds,options)=>{return apiRequest(`/enterprise/${enterpriseId}/seats/bulk-policy-assignment`,{method:'POST',body:JSON.stringify({seatIds,policyIds,options})});},// Invite user to seat\ninviteUserToSeat:async(enterpriseId,seatId,userData)=>{return apiRequest(`/enterprise/${enterpriseId}/seats/${seatId}/invite-user`,{method:'POST',body:JSON.stringify(userData)});},// Get seat analytics\ngetSeatAnalytics:async function(enterpriseId){let timeRange=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'30d';return apiRequest(`/enterprise/${enterpriseId}/seats/analytics?timeRange=${timeRange}`);},// Get available policies for assignment\ngetAvailablePolicies:async enterpriseId=>{return apiRequest(`/enterprise/${enterpriseId}/policies/available`);},// Get seat compliance report\ngetSeatComplianceReport:async(enterpriseId,seatId)=>{return apiRequest(`/enterprise/${enterpriseId}/seats/${seatId}/compliance-report`);},// AI-Powered Policy Automation API endpoints\n// Generate AI policy based on intent\ngeneratePolicyWithAI:async policyIntent=>{return apiRequest('/ai/generate-policy-with-ai',{method:'POST',body:JSON.stringify(policyIntent)});},// Analyze policy conflicts\nanalyzePolicyConflicts:async conflictAnalysis=>{return apiRequest('/ai/analyze-conflicts',{method:'POST',body:JSON.stringify(conflictAnalysis)});},// Analyze regulatory impact\nanalyzeRegulatoryImpact:async impactAnalysis=>{return apiRequest('/ai/analyze-regulatory-impact',{method:'POST',body:JSON.stringify(impactAnalysis)});},// Generate policy updates based on regulatory changes\ngeneratePolicyUpdates:async updateRequest=>{return apiRequest('/ai/generate-policy-updates',{method:'POST',body:JSON.stringify(updateRequest)});},// Get regulatory updates\ngetRegulatoryUpdates:async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const queryParams=new URLSearchParams(filters).toString();return apiRequest(`/regulatory/updates?${queryParams}`);},// Apply automatic policy updates\napplyPolicyAutoUpdate:async updateData=>{return apiRequest('/policies/auto-update',{method:'POST',body:JSON.stringify(updateData)});},// Get AI policy templates\ngetAIPolicyTemplates:async()=>{return apiRequest('/ai/policy-templates');},// Validate AI-generated policy\nvalidateAIPolicy:async policyData=>{return apiRequest('/ai/validate-ai-policy',{method:'POST',body:JSON.stringify(policyData)});},// Get policy approval workflow\ngetPolicyApprovalWorkflow:async policyId=>{return apiRequest(`/policies/${policyId}/approval-workflow`);},// Submit policy for approval\nsubmitPolicyForApproval:async(policyId,approvalData)=>{return apiRequest(`/policies/${policyId}/submit-approval`,{method:'POST',body:JSON.stringify(approvalData)});},// Get policy deployment status\ngetPolicyDeploymentStatus:async policyId=>{return apiRequest(`/policies/${policyId}/deployment-status`);}};// WebSocket connection for real-time updates\nexport class WebSocketService{constructor(){this.ws=null;this.reconnectAttempts=0;this.maxReconnectAttempts=5;this.reconnectDelay=1000;this.listeners=new Map();}connect(token){const wsUrl=process.env.REACT_APP_WS_URL||'ws://localhost:3000/ws';this.ws=new WebSocket(`${wsUrl}?token=${token}`);this.ws.onopen=()=>{console.log('WebSocket connected');this.reconnectAttempts=0;};this.ws.onmessage=event=>{try{const data=JSON.parse(event.data);this.handleMessage(data);}catch(error){console.error('Failed to parse WebSocket message:',error);}};this.ws.onclose=()=>{console.log('WebSocket disconnected');this.scheduleReconnect();};this.ws.onerror=error=>{console.error('WebSocket error:',error);};}scheduleReconnect(){if(this.reconnectAttempts<this.maxReconnectAttempts){this.reconnectAttempts++;setTimeout(()=>{const token=getAuthToken();if(token){this.connect(token);}},this.reconnectDelay*this.reconnectAttempts);}}handleMessage(data){const{type,payload}=data;// Notify listeners based on message type\nif(this.listeners.has(type)){this.listeners.get(type).forEach(callback=>callback(payload));}}subscribe(type,callback){if(!this.listeners.has(type)){this.listeners.set(type,[]);}this.listeners.get(type).push(callback);// Return unsubscribe function\nreturn()=>{const callbacks=this.listeners.get(type);const index=callbacks.indexOf(callback);if(index>-1){callbacks.splice(index,1);}};}disconnect(){if(this.ws){this.ws.close();this.ws=null;}}}// Export WebSocket instance\nexport const wsService=new WebSocketService();","map":{"version":3,"names":["API_BASE","process","env","REACT_APP_API_URL","getAuthToken","localStorage","getItem","sessionStorage","apiRequest","endpoint","options","arguments","length","undefined","token","config","headers","response","fetch","ok","status","removeItem","window","location","href","Error","errorData","json","catch","message","statusText","contextApi","getUserContexts","switchContext","contextId","method","body","JSON","stringify","getDashboardData","contextType","getNotifications","filter","markNotificationRead","notificationId","markAllNotificationsRead","getEnterpriseData","enterpriseId","getAgencySeatData","seatId","getUserProfile","updateUserProfile","profileData","getComplianceMetrics","getAuditEvents","limit","getPolicies","getSubmissions","getToolRequests","getEnterpriseSeats","createSeat","seatData","updateSeat","deleteSeat","bulkAssignPolicies","seatIds","policyIds","inviteUserToSeat","userData","getSeatAnalytics","timeRange","getAvailablePolicies","getSeatComplianceReport","generatePolicyWithAI","policyIntent","analyzePolicyConflicts","conflictAnalysis","analyzeRegulatoryImpact","impactAnalysis","generatePolicyUpdates","updateRequest","getRegulatoryUpdates","filters","queryParams","URLSearchParams","toString","applyPolicyAutoUpdate","updateData","getAIPolicyTemplates","validateAIPolicy","policyData","getPolicyApprovalWorkflow","policyId","submitPolicyForApproval","approvalData","getPolicyDeploymentStatus","WebSocketService","constructor","ws","reconnectAttempts","maxReconnectAttempts","reconnectDelay","listeners","Map","connect","wsUrl","REACT_APP_WS_URL","WebSocket","onopen","console","log","onmessage","event","data","parse","handleMessage","error","onclose","scheduleReconnect","onerror","setTimeout","type","payload","has","get","forEach","callback","subscribe","set","push","callbacks","index","indexOf","splice","disconnect","close","wsService"],"sources":["C:/Users/dgtow/intelligent-policy-engine/aicomplyr-intelligence/ui/src/services/contextApi.js"],"sourcesContent":["// API Service Layer for Context Management\r\nconst API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n\r\n// Authentication helper\r\nconst getAuthToken = () => {\r\n  return localStorage.getItem('aicomplyr_token') || sessionStorage.getItem('aicomplyr_token');\r\n};\r\n\r\n// API request helper with authentication\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n  const token = getAuthToken();\r\n  \r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...(token && { 'Authorization': `Bearer ${token}` }),\r\n      ...options.headers,\r\n    },\r\n    ...options,\r\n  };\r\n\r\n  const response = await fetch(`${API_BASE}${endpoint}`, config);\r\n  \r\n  if (!response.ok) {\r\n    if (response.status === 401) {\r\n      // Handle token refresh or redirect to login\r\n      localStorage.removeItem('aicomplyr_token');\r\n      sessionStorage.removeItem('aicomplyr_token');\r\n      window.location.href = '/login';\r\n      throw new Error('Authentication required');\r\n    }\r\n    \r\n    const errorData = await response.json().catch(() => ({}));\r\n    throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n\r\n// Context Management API\r\nexport const contextApi = {\r\n  // Fetch all contexts for current user\r\n  getUserContexts: async () => {\r\n    return apiRequest('/user/contexts');\r\n  },\r\n\r\n  // Switch to a different context\r\n  switchContext: async (contextId) => {\r\n    return apiRequest('/user/context/switch', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ contextId }),\r\n    });\r\n  },\r\n\r\n  // Get dashboard data for current context\r\n  getDashboardData: async (contextType, contextId) => {\r\n    return apiRequest(`/dashboard/${contextType}/${contextId}`);\r\n  },\r\n\r\n  // Get notifications for current context\r\n  getNotifications: async (contextId, filter = 'all') => {\r\n    return apiRequest(`/notifications/${contextId}?filter=${filter}`);\r\n  },\r\n\r\n  // Mark notification as read\r\n  markNotificationRead: async (notificationId) => {\r\n    return apiRequest(`/notifications/${notificationId}/read`, {\r\n      method: 'PUT',\r\n    });\r\n  },\r\n\r\n  // Mark all notifications as read\r\n  markAllNotificationsRead: async (contextId) => {\r\n    return apiRequest(`/notifications/${contextId}/read-all`, {\r\n      method: 'PUT',\r\n    });\r\n  },\r\n\r\n  // Get enterprise data\r\n  getEnterpriseData: async (enterpriseId) => {\r\n    return apiRequest(`/enterprises/${enterpriseId}`);\r\n  },\r\n\r\n  // Get agency seat data\r\n  getAgencySeatData: async (seatId) => {\r\n    return apiRequest(`/agency-seats/${seatId}`);\r\n  },\r\n\r\n  // Get user profile\r\n  getUserProfile: async () => {\r\n    return apiRequest('/user/profile');\r\n  },\r\n\r\n  // Update user profile\r\n  updateUserProfile: async (profileData) => {\r\n    return apiRequest('/user/profile', {\r\n      method: 'PUT',\r\n      body: JSON.stringify(profileData),\r\n    });\r\n  },\r\n\r\n  // Get compliance metrics\r\n  getComplianceMetrics: async (contextId) => {\r\n    return apiRequest(`/compliance/metrics/${contextId}`);\r\n  },\r\n\r\n  // Get audit events\r\n  getAuditEvents: async (contextId, limit = 50) => {\r\n    return apiRequest(`/audit/events/${contextId}?limit=${limit}`);\r\n  },\r\n\r\n  // Get policy data\r\n  getPolicies: async (contextId) => {\r\n    return apiRequest(`/policies/${contextId}`);\r\n  },\r\n\r\n  // Get submissions\r\n  getSubmissions: async (contextId, status = 'all') => {\r\n    return apiRequest(`/submissions/${contextId}?status=${status}`);\r\n  },\r\n\r\n  // Get tool requests\r\n  getToolRequests: async (contextId) => {\r\n    return apiRequest(`/tool-requests/${contextId}`);\r\n  },\r\n\r\n  // Seat Management API endpoints\r\n  // Get all seats for an enterprise\r\n  getEnterpriseSeats: async (enterpriseId) => {\r\n    return apiRequest(`/enterprise/${enterpriseId}/seats`);\r\n  },\r\n\r\n  // Create a new seat\r\n  createSeat: async (enterpriseId, seatData) => {\r\n    return apiRequest(`/enterprise/${enterpriseId}/seats`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(seatData),\r\n    });\r\n  },\r\n\r\n  // Update a seat\r\n  updateSeat: async (enterpriseId, seatId, seatData) => {\r\n    return apiRequest(`/enterprise/${enterpriseId}/seats/${seatId}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(seatData),\r\n    });\r\n  },\r\n\r\n  // Delete a seat\r\n  deleteSeat: async (enterpriseId, seatId) => {\r\n    return apiRequest(`/enterprise/${enterpriseId}/seats/${seatId}`, {\r\n      method: 'DELETE',\r\n    });\r\n  },\r\n\r\n  // Bulk policy assignment to seats\r\n  bulkAssignPolicies: async (enterpriseId, seatIds, policyIds, options) => {\r\n    return apiRequest(`/enterprise/${enterpriseId}/seats/bulk-policy-assignment`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ seatIds, policyIds, options }),\r\n    });\r\n  },\r\n\r\n  // Invite user to seat\r\n  inviteUserToSeat: async (enterpriseId, seatId, userData) => {\r\n    return apiRequest(`/enterprise/${enterpriseId}/seats/${seatId}/invite-user`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData),\r\n    });\r\n  },\r\n\r\n  // Get seat analytics\r\n  getSeatAnalytics: async (enterpriseId, timeRange = '30d') => {\r\n    return apiRequest(`/enterprise/${enterpriseId}/seats/analytics?timeRange=${timeRange}`);\r\n  },\r\n\r\n  // Get available policies for assignment\r\n  getAvailablePolicies: async (enterpriseId) => {\r\n    return apiRequest(`/enterprise/${enterpriseId}/policies/available`);\r\n  },\r\n\r\n  // Get seat compliance report\r\n  getSeatComplianceReport: async (enterpriseId, seatId) => {\r\n    return apiRequest(`/enterprise/${enterpriseId}/seats/${seatId}/compliance-report`);\r\n  },\r\n\r\n  // AI-Powered Policy Automation API endpoints\r\n  // Generate AI policy based on intent\r\n  generatePolicyWithAI: async (policyIntent) => {\r\n    return apiRequest('/ai/generate-policy-with-ai', {\r\n      method: 'POST',\r\n      body: JSON.stringify(policyIntent),\r\n    });\r\n  },\r\n\r\n  // Analyze policy conflicts\r\n  analyzePolicyConflicts: async (conflictAnalysis) => {\r\n    return apiRequest('/ai/analyze-conflicts', {\r\n      method: 'POST',\r\n      body: JSON.stringify(conflictAnalysis),\r\n    });\r\n  },\r\n\r\n  // Analyze regulatory impact\r\n  analyzeRegulatoryImpact: async (impactAnalysis) => {\r\n    return apiRequest('/ai/analyze-regulatory-impact', {\r\n      method: 'POST',\r\n      body: JSON.stringify(impactAnalysis),\r\n    });\r\n  },\r\n\r\n  // Generate policy updates based on regulatory changes\r\n  generatePolicyUpdates: async (updateRequest) => {\r\n    return apiRequest('/ai/generate-policy-updates', {\r\n      method: 'POST',\r\n      body: JSON.stringify(updateRequest),\r\n    });\r\n  },\r\n\r\n  // Get regulatory updates\r\n  getRegulatoryUpdates: async (filters = {}) => {\r\n    const queryParams = new URLSearchParams(filters).toString();\r\n    return apiRequest(`/regulatory/updates?${queryParams}`);\r\n  },\r\n\r\n  // Apply automatic policy updates\r\n  applyPolicyAutoUpdate: async (updateData) => {\r\n    return apiRequest('/policies/auto-update', {\r\n      method: 'POST',\r\n      body: JSON.stringify(updateData),\r\n    });\r\n  },\r\n\r\n  // Get AI policy templates\r\n  getAIPolicyTemplates: async () => {\r\n    return apiRequest('/ai/policy-templates');\r\n  },\r\n\r\n  // Validate AI-generated policy\r\n  validateAIPolicy: async (policyData) => {\r\n    return apiRequest('/ai/validate-ai-policy', {\r\n      method: 'POST',\r\n      body: JSON.stringify(policyData),\r\n    });\r\n  },\r\n\r\n  // Get policy approval workflow\r\n  getPolicyApprovalWorkflow: async (policyId) => {\r\n    return apiRequest(`/policies/${policyId}/approval-workflow`);\r\n  },\r\n\r\n  // Submit policy for approval\r\n  submitPolicyForApproval: async (policyId, approvalData) => {\r\n    return apiRequest(`/policies/${policyId}/submit-approval`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(approvalData),\r\n    });\r\n  },\r\n\r\n  // Get policy deployment status\r\n  getPolicyDeploymentStatus: async (policyId) => {\r\n    return apiRequest(`/policies/${policyId}/deployment-status`);\r\n  },\r\n};\r\n\r\n// WebSocket connection for real-time updates\r\nexport class WebSocketService {\r\n  constructor() {\r\n    this.ws = null;\r\n    this.reconnectAttempts = 0;\r\n    this.maxReconnectAttempts = 5;\r\n    this.reconnectDelay = 1000;\r\n    this.listeners = new Map();\r\n  }\r\n\r\n  connect(token) {\r\n    const wsUrl = process.env.REACT_APP_WS_URL || 'ws://localhost:3000/ws';\r\n    this.ws = new WebSocket(`${wsUrl}?token=${token}`);\r\n\r\n    this.ws.onopen = () => {\r\n      console.log('WebSocket connected');\r\n      this.reconnectAttempts = 0;\r\n    };\r\n\r\n    this.ws.onmessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n        this.handleMessage(data);\r\n      } catch (error) {\r\n        console.error('Failed to parse WebSocket message:', error);\r\n      }\r\n    };\r\n\r\n    this.ws.onclose = () => {\r\n      console.log('WebSocket disconnected');\r\n      this.scheduleReconnect();\r\n    };\r\n\r\n    this.ws.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n    };\r\n  }\r\n\r\n  scheduleReconnect() {\r\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\r\n      this.reconnectAttempts++;\r\n      setTimeout(() => {\r\n        const token = getAuthToken();\r\n        if (token) {\r\n          this.connect(token);\r\n        }\r\n      }, this.reconnectDelay * this.reconnectAttempts);\r\n    }\r\n  }\r\n\r\n  handleMessage(data) {\r\n    const { type, payload } = data;\r\n    \r\n    // Notify listeners based on message type\r\n    if (this.listeners.has(type)) {\r\n      this.listeners.get(type).forEach(callback => callback(payload));\r\n    }\r\n  }\r\n\r\n  subscribe(type, callback) {\r\n    if (!this.listeners.has(type)) {\r\n      this.listeners.set(type, []);\r\n    }\r\n    this.listeners.get(type).push(callback);\r\n\r\n    // Return unsubscribe function\r\n    return () => {\r\n      const callbacks = this.listeners.get(type);\r\n      const index = callbacks.indexOf(callback);\r\n      if (index > -1) {\r\n        callbacks.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.ws) {\r\n      this.ws.close();\r\n      this.ws = null;\r\n    }\r\n  }\r\n}\r\n\r\n// Export WebSocket instance\r\nexport const wsService = new WebSocketService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}