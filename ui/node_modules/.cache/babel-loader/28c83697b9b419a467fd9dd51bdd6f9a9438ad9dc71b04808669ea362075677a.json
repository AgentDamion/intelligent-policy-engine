{"ast":null,"code":"// API Service Layer for Context Management\nconst API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// Authentication helper\nconst getAuthToken = () => {\n  return localStorage.getItem('aicomplyr_token') || sessionStorage.getItem('aicomplyr_token');\n};\n\n// API request helper with authentication\nconst apiRequest = async (endpoint, options = {}) => {\n  const token = getAuthToken();\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...(token && {\n        'Authorization': `Bearer ${token}`\n      }),\n      ...options.headers\n    },\n    ...options\n  };\n  const response = await fetch(`${API_BASE}${endpoint}`, config);\n  if (!response.ok) {\n    if (response.status === 401) {\n      // Handle token refresh or redirect to login\n      localStorage.removeItem('aicomplyr_token');\n      sessionStorage.removeItem('aicomplyr_token');\n      window.location.href = '/login';\n      throw new Error('Authentication required');\n    }\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);\n  }\n  return response.json();\n};\n\n// Context Management API\nexport const contextApi = {\n  // Fetch all contexts for current user\n  getUserContexts: async () => {\n    return apiRequest('/user/contexts');\n  },\n  // Switch to a different context\n  switchContext: async contextId => {\n    return apiRequest('/user/context/switch', {\n      method: 'POST',\n      body: JSON.stringify({\n        contextId\n      })\n    });\n  },\n  // Get dashboard data for current context\n  getDashboardData: async (contextType, contextId) => {\n    return apiRequest(`/dashboard/${contextType}/${contextId}`);\n  },\n  // Get notifications for current context\n  getNotifications: async (contextId, filter = 'all') => {\n    return apiRequest(`/notifications/${contextId}?filter=${filter}`);\n  },\n  // Mark notification as read\n  markNotificationRead: async notificationId => {\n    return apiRequest(`/notifications/${notificationId}/read`, {\n      method: 'PUT'\n    });\n  },\n  // Mark all notifications as read\n  markAllNotificationsRead: async contextId => {\n    return apiRequest(`/notifications/${contextId}/read-all`, {\n      method: 'PUT'\n    });\n  },\n  // Get enterprise data\n  getEnterpriseData: async enterpriseId => {\n    return apiRequest(`/enterprises/${enterpriseId}`);\n  },\n  // Get agency seat data\n  getAgencySeatData: async seatId => {\n    return apiRequest(`/agency-seats/${seatId}`);\n  },\n  // Get user profile\n  getUserProfile: async () => {\n    return apiRequest('/user/profile');\n  },\n  // Update user profile\n  updateUserProfile: async profileData => {\n    return apiRequest('/user/profile', {\n      method: 'PUT',\n      body: JSON.stringify(profileData)\n    });\n  },\n  // Get compliance metrics\n  getComplianceMetrics: async contextId => {\n    return apiRequest(`/compliance/metrics/${contextId}`);\n  },\n  // Get audit events\n  getAuditEvents: async (contextId, limit = 50) => {\n    return apiRequest(`/audit/events/${contextId}?limit=${limit}`);\n  },\n  // Get policy data\n  getPolicies: async contextId => {\n    return apiRequest(`/policies/${contextId}`);\n  },\n  // Get submissions\n  getSubmissions: async (contextId, status = 'all') => {\n    return apiRequest(`/submissions/${contextId}?status=${status}`);\n  },\n  // Get tool requests\n  getToolRequests: async contextId => {\n    return apiRequest(`/tool-requests/${contextId}`);\n  },\n  // Seat Management API endpoints\n  // Get all seats for an enterprise\n  getEnterpriseSeats: async enterpriseId => {\n    return apiRequest(`/enterprise/${enterpriseId}/seats`);\n  },\n  // Create a new seat\n  createSeat: async (enterpriseId, seatData) => {\n    return apiRequest(`/enterprise/${enterpriseId}/seats`, {\n      method: 'POST',\n      body: JSON.stringify(seatData)\n    });\n  },\n  // Update a seat\n  updateSeat: async (enterpriseId, seatId, seatData) => {\n    return apiRequest(`/enterprise/${enterpriseId}/seats/${seatId}`, {\n      method: 'PUT',\n      body: JSON.stringify(seatData)\n    });\n  },\n  // Delete a seat\n  deleteSeat: async (enterpriseId, seatId) => {\n    return apiRequest(`/enterprise/${enterpriseId}/seats/${seatId}`, {\n      method: 'DELETE'\n    });\n  },\n  // Bulk policy assignment to seats\n  bulkAssignPolicies: async (enterpriseId, seatIds, policyIds, options) => {\n    return apiRequest(`/enterprise/${enterpriseId}/seats/bulk-policy-assignment`, {\n      method: 'POST',\n      body: JSON.stringify({\n        seatIds,\n        policyIds,\n        options\n      })\n    });\n  },\n  // Invite user to seat\n  inviteUserToSeat: async (enterpriseId, seatId, userData) => {\n    return apiRequest(`/enterprise/${enterpriseId}/seats/${seatId}/invite-user`, {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  },\n  // Get seat analytics\n  getSeatAnalytics: async (enterpriseId, timeRange = '30d') => {\n    return apiRequest(`/enterprise/${enterpriseId}/seats/analytics?timeRange=${timeRange}`);\n  },\n  // Get available policies for assignment\n  getAvailablePolicies: async enterpriseId => {\n    return apiRequest(`/enterprise/${enterpriseId}/policies/available`);\n  },\n  // Get seat compliance report\n  getSeatComplianceReport: async (enterpriseId, seatId) => {\n    return apiRequest(`/enterprise/${enterpriseId}/seats/${seatId}/compliance-report`);\n  },\n  // AI-Powered Policy Automation API endpoints\n  // Generate AI policy based on intent\n  generatePolicyWithAI: async policyIntent => {\n    return apiRequest('/ai/generate-policy-with-ai', {\n      method: 'POST',\n      body: JSON.stringify(policyIntent)\n    });\n  },\n  // Analyze policy conflicts\n  analyzePolicyConflicts: async conflictAnalysis => {\n    return apiRequest('/ai/analyze-conflicts', {\n      method: 'POST',\n      body: JSON.stringify(conflictAnalysis)\n    });\n  },\n  // Analyze regulatory impact\n  analyzeRegulatoryImpact: async impactAnalysis => {\n    return apiRequest('/ai/analyze-regulatory-impact', {\n      method: 'POST',\n      body: JSON.stringify(impactAnalysis)\n    });\n  },\n  // Generate policy updates based on regulatory changes\n  generatePolicyUpdates: async updateRequest => {\n    return apiRequest('/ai/generate-policy-updates', {\n      method: 'POST',\n      body: JSON.stringify(updateRequest)\n    });\n  },\n  // Get regulatory updates\n  getRegulatoryUpdates: async (filters = {}) => {\n    const queryParams = new URLSearchParams(filters).toString();\n    return apiRequest(`/regulatory/updates?${queryParams}`);\n  },\n  // Apply automatic policy updates\n  applyPolicyAutoUpdate: async updateData => {\n    return apiRequest('/policies/auto-update', {\n      method: 'POST',\n      body: JSON.stringify(updateData)\n    });\n  },\n  // Get AI policy templates\n  getAIPolicyTemplates: async () => {\n    return apiRequest('/ai/policy-templates');\n  },\n  // Validate AI-generated policy\n  validateAIPolicy: async policyData => {\n    return apiRequest('/ai/validate-ai-policy', {\n      method: 'POST',\n      body: JSON.stringify(policyData)\n    });\n  },\n  // Get policy approval workflow\n  getPolicyApprovalWorkflow: async policyId => {\n    return apiRequest(`/policies/${policyId}/approval-workflow`);\n  },\n  // Submit policy for approval\n  submitPolicyForApproval: async (policyId, approvalData) => {\n    return apiRequest(`/policies/${policyId}/submit-approval`, {\n      method: 'POST',\n      body: JSON.stringify(approvalData)\n    });\n  },\n  // Get policy deployment status\n  getPolicyDeploymentStatus: async policyId => {\n    return apiRequest(`/policies/${policyId}/deployment-status`);\n  }\n};\n\n// WebSocket connection for real-time updates\nexport class WebSocketService {\n  constructor() {\n    this.ws = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000;\n    this.listeners = new Map();\n  }\n  connect(token) {\n    const wsUrl = process.env.REACT_APP_WS_URL || 'ws://localhost:3000/ws';\n    this.ws = new WebSocket(`${wsUrl}?token=${token}`);\n    this.ws.onopen = () => {\n      console.log('WebSocket connected');\n      this.reconnectAttempts = 0;\n    };\n    this.ws.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        this.handleMessage(data);\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n      }\n    };\n    this.ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      this.scheduleReconnect();\n    };\n    this.ws.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n  }\n  scheduleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      setTimeout(() => {\n        const token = getAuthToken();\n        if (token) {\n          this.connect(token);\n        }\n      }, this.reconnectDelay * this.reconnectAttempts);\n    }\n  }\n  handleMessage(data) {\n    const {\n      type,\n      payload\n    } = data;\n\n    // Notify listeners based on message type\n    if (this.listeners.has(type)) {\n      this.listeners.get(type).forEach(callback => callback(payload));\n    }\n  }\n  subscribe(type, callback) {\n    if (!this.listeners.has(type)) {\n      this.listeners.set(type, []);\n    }\n    this.listeners.get(type).push(callback);\n\n    // Return unsubscribe function\n    return () => {\n      const callbacks = this.listeners.get(type);\n      const index = callbacks.indexOf(callback);\n      if (index > -1) {\n        callbacks.splice(index, 1);\n      }\n    };\n  }\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n}\n\n// Export WebSocket instance\nexport const wsService = new WebSocketService();","map":{"version":3,"names":["API_BASE","process","env","REACT_APP_API_URL","getAuthToken","localStorage","getItem","sessionStorage","apiRequest","endpoint","options","token","config","headers","response","fetch","ok","status","removeItem","window","location","href","Error","errorData","json","catch","message","statusText","contextApi","getUserContexts","switchContext","contextId","method","body","JSON","stringify","getDashboardData","contextType","getNotifications","filter","markNotificationRead","notificationId","markAllNotificationsRead","getEnterpriseData","enterpriseId","getAgencySeatData","seatId","getUserProfile","updateUserProfile","profileData","getComplianceMetrics","getAuditEvents","limit","getPolicies","getSubmissions","getToolRequests","getEnterpriseSeats","createSeat","seatData","updateSeat","deleteSeat","bulkAssignPolicies","seatIds","policyIds","inviteUserToSeat","userData","getSeatAnalytics","timeRange","getAvailablePolicies","getSeatComplianceReport","generatePolicyWithAI","policyIntent","analyzePolicyConflicts","conflictAnalysis","analyzeRegulatoryImpact","impactAnalysis","generatePolicyUpdates","updateRequest","getRegulatoryUpdates","filters","queryParams","URLSearchParams","toString","applyPolicyAutoUpdate","updateData","getAIPolicyTemplates","validateAIPolicy","policyData","getPolicyApprovalWorkflow","policyId","submitPolicyForApproval","approvalData","getPolicyDeploymentStatus","WebSocketService","constructor","ws","reconnectAttempts","maxReconnectAttempts","reconnectDelay","listeners","Map","connect","wsUrl","REACT_APP_WS_URL","WebSocket","onopen","console","log","onmessage","event","data","parse","handleMessage","error","onclose","scheduleReconnect","onerror","setTimeout","type","payload","has","get","forEach","callback","subscribe","set","push","callbacks","index","indexOf","splice","disconnect","close","wsService"],"sources":["C:/Users/dgtow/intelligent-policy-engine/aicomplyr-intelligence/ui/src/services/contextApi.js"],"sourcesContent":["// API Service Layer for Context Management\r\nconst API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n\r\n// Authentication helper\r\nconst getAuthToken = () => {\r\n  return localStorage.getItem('aicomplyr_token') || sessionStorage.getItem('aicomplyr_token');\r\n};\r\n\r\n// API request helper with authentication\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n  const token = getAuthToken();\r\n  \r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...(token && { 'Authorization': `Bearer ${token}` }),\r\n      ...options.headers,\r\n    },\r\n    ...options,\r\n  };\r\n\r\n  const response = await fetch(`${API_BASE}${endpoint}`, config);\r\n  \r\n  if (!response.ok) {\r\n    if (response.status === 401) {\r\n      // Handle token refresh or redirect to login\r\n      localStorage.removeItem('aicomplyr_token');\r\n      sessionStorage.removeItem('aicomplyr_token');\r\n      window.location.href = '/login';\r\n      throw new Error('Authentication required');\r\n    }\r\n    \r\n    const errorData = await response.json().catch(() => ({}));\r\n    throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n\r\n// Context Management API\r\nexport const contextApi = {\r\n  // Fetch all contexts for current user\r\n  getUserContexts: async () => {\r\n    return apiRequest('/user/contexts');\r\n  },\r\n\r\n  // Switch to a different context\r\n  switchContext: async (contextId) => {\r\n    return apiRequest('/user/context/switch', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ contextId }),\r\n    });\r\n  },\r\n\r\n  // Get dashboard data for current context\r\n  getDashboardData: async (contextType, contextId) => {\r\n    return apiRequest(`/dashboard/${contextType}/${contextId}`);\r\n  },\r\n\r\n  // Get notifications for current context\r\n  getNotifications: async (contextId, filter = 'all') => {\r\n    return apiRequest(`/notifications/${contextId}?filter=${filter}`);\r\n  },\r\n\r\n  // Mark notification as read\r\n  markNotificationRead: async (notificationId) => {\r\n    return apiRequest(`/notifications/${notificationId}/read`, {\r\n      method: 'PUT',\r\n    });\r\n  },\r\n\r\n  // Mark all notifications as read\r\n  markAllNotificationsRead: async (contextId) => {\r\n    return apiRequest(`/notifications/${contextId}/read-all`, {\r\n      method: 'PUT',\r\n    });\r\n  },\r\n\r\n  // Get enterprise data\r\n  getEnterpriseData: async (enterpriseId) => {\r\n    return apiRequest(`/enterprises/${enterpriseId}`);\r\n  },\r\n\r\n  // Get agency seat data\r\n  getAgencySeatData: async (seatId) => {\r\n    return apiRequest(`/agency-seats/${seatId}`);\r\n  },\r\n\r\n  // Get user profile\r\n  getUserProfile: async () => {\r\n    return apiRequest('/user/profile');\r\n  },\r\n\r\n  // Update user profile\r\n  updateUserProfile: async (profileData) => {\r\n    return apiRequest('/user/profile', {\r\n      method: 'PUT',\r\n      body: JSON.stringify(profileData),\r\n    });\r\n  },\r\n\r\n  // Get compliance metrics\r\n  getComplianceMetrics: async (contextId) => {\r\n    return apiRequest(`/compliance/metrics/${contextId}`);\r\n  },\r\n\r\n  // Get audit events\r\n  getAuditEvents: async (contextId, limit = 50) => {\r\n    return apiRequest(`/audit/events/${contextId}?limit=${limit}`);\r\n  },\r\n\r\n  // Get policy data\r\n  getPolicies: async (contextId) => {\r\n    return apiRequest(`/policies/${contextId}`);\r\n  },\r\n\r\n  // Get submissions\r\n  getSubmissions: async (contextId, status = 'all') => {\r\n    return apiRequest(`/submissions/${contextId}?status=${status}`);\r\n  },\r\n\r\n  // Get tool requests\r\n  getToolRequests: async (contextId) => {\r\n    return apiRequest(`/tool-requests/${contextId}`);\r\n  },\r\n\r\n  // Seat Management API endpoints\r\n  // Get all seats for an enterprise\r\n  getEnterpriseSeats: async (enterpriseId) => {\r\n    return apiRequest(`/enterprise/${enterpriseId}/seats`);\r\n  },\r\n\r\n  // Create a new seat\r\n  createSeat: async (enterpriseId, seatData) => {\r\n    return apiRequest(`/enterprise/${enterpriseId}/seats`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(seatData),\r\n    });\r\n  },\r\n\r\n  // Update a seat\r\n  updateSeat: async (enterpriseId, seatId, seatData) => {\r\n    return apiRequest(`/enterprise/${enterpriseId}/seats/${seatId}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(seatData),\r\n    });\r\n  },\r\n\r\n  // Delete a seat\r\n  deleteSeat: async (enterpriseId, seatId) => {\r\n    return apiRequest(`/enterprise/${enterpriseId}/seats/${seatId}`, {\r\n      method: 'DELETE',\r\n    });\r\n  },\r\n\r\n  // Bulk policy assignment to seats\r\n  bulkAssignPolicies: async (enterpriseId, seatIds, policyIds, options) => {\r\n    return apiRequest(`/enterprise/${enterpriseId}/seats/bulk-policy-assignment`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ seatIds, policyIds, options }),\r\n    });\r\n  },\r\n\r\n  // Invite user to seat\r\n  inviteUserToSeat: async (enterpriseId, seatId, userData) => {\r\n    return apiRequest(`/enterprise/${enterpriseId}/seats/${seatId}/invite-user`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData),\r\n    });\r\n  },\r\n\r\n  // Get seat analytics\r\n  getSeatAnalytics: async (enterpriseId, timeRange = '30d') => {\r\n    return apiRequest(`/enterprise/${enterpriseId}/seats/analytics?timeRange=${timeRange}`);\r\n  },\r\n\r\n  // Get available policies for assignment\r\n  getAvailablePolicies: async (enterpriseId) => {\r\n    return apiRequest(`/enterprise/${enterpriseId}/policies/available`);\r\n  },\r\n\r\n  // Get seat compliance report\r\n  getSeatComplianceReport: async (enterpriseId, seatId) => {\r\n    return apiRequest(`/enterprise/${enterpriseId}/seats/${seatId}/compliance-report`);\r\n  },\r\n\r\n  // AI-Powered Policy Automation API endpoints\r\n  // Generate AI policy based on intent\r\n  generatePolicyWithAI: async (policyIntent) => {\r\n    return apiRequest('/ai/generate-policy-with-ai', {\r\n      method: 'POST',\r\n      body: JSON.stringify(policyIntent),\r\n    });\r\n  },\r\n\r\n  // Analyze policy conflicts\r\n  analyzePolicyConflicts: async (conflictAnalysis) => {\r\n    return apiRequest('/ai/analyze-conflicts', {\r\n      method: 'POST',\r\n      body: JSON.stringify(conflictAnalysis),\r\n    });\r\n  },\r\n\r\n  // Analyze regulatory impact\r\n  analyzeRegulatoryImpact: async (impactAnalysis) => {\r\n    return apiRequest('/ai/analyze-regulatory-impact', {\r\n      method: 'POST',\r\n      body: JSON.stringify(impactAnalysis),\r\n    });\r\n  },\r\n\r\n  // Generate policy updates based on regulatory changes\r\n  generatePolicyUpdates: async (updateRequest) => {\r\n    return apiRequest('/ai/generate-policy-updates', {\r\n      method: 'POST',\r\n      body: JSON.stringify(updateRequest),\r\n    });\r\n  },\r\n\r\n  // Get regulatory updates\r\n  getRegulatoryUpdates: async (filters = {}) => {\r\n    const queryParams = new URLSearchParams(filters).toString();\r\n    return apiRequest(`/regulatory/updates?${queryParams}`);\r\n  },\r\n\r\n  // Apply automatic policy updates\r\n  applyPolicyAutoUpdate: async (updateData) => {\r\n    return apiRequest('/policies/auto-update', {\r\n      method: 'POST',\r\n      body: JSON.stringify(updateData),\r\n    });\r\n  },\r\n\r\n  // Get AI policy templates\r\n  getAIPolicyTemplates: async () => {\r\n    return apiRequest('/ai/policy-templates');\r\n  },\r\n\r\n  // Validate AI-generated policy\r\n  validateAIPolicy: async (policyData) => {\r\n    return apiRequest('/ai/validate-ai-policy', {\r\n      method: 'POST',\r\n      body: JSON.stringify(policyData),\r\n    });\r\n  },\r\n\r\n  // Get policy approval workflow\r\n  getPolicyApprovalWorkflow: async (policyId) => {\r\n    return apiRequest(`/policies/${policyId}/approval-workflow`);\r\n  },\r\n\r\n  // Submit policy for approval\r\n  submitPolicyForApproval: async (policyId, approvalData) => {\r\n    return apiRequest(`/policies/${policyId}/submit-approval`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(approvalData),\r\n    });\r\n  },\r\n\r\n  // Get policy deployment status\r\n  getPolicyDeploymentStatus: async (policyId) => {\r\n    return apiRequest(`/policies/${policyId}/deployment-status`);\r\n  },\r\n};\r\n\r\n// WebSocket connection for real-time updates\r\nexport class WebSocketService {\r\n  constructor() {\r\n    this.ws = null;\r\n    this.reconnectAttempts = 0;\r\n    this.maxReconnectAttempts = 5;\r\n    this.reconnectDelay = 1000;\r\n    this.listeners = new Map();\r\n  }\r\n\r\n  connect(token) {\r\n    const wsUrl = process.env.REACT_APP_WS_URL || 'ws://localhost:3000/ws';\r\n    this.ws = new WebSocket(`${wsUrl}?token=${token}`);\r\n\r\n    this.ws.onopen = () => {\r\n      console.log('WebSocket connected');\r\n      this.reconnectAttempts = 0;\r\n    };\r\n\r\n    this.ws.onmessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n        this.handleMessage(data);\r\n      } catch (error) {\r\n        console.error('Failed to parse WebSocket message:', error);\r\n      }\r\n    };\r\n\r\n    this.ws.onclose = () => {\r\n      console.log('WebSocket disconnected');\r\n      this.scheduleReconnect();\r\n    };\r\n\r\n    this.ws.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n    };\r\n  }\r\n\r\n  scheduleReconnect() {\r\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\r\n      this.reconnectAttempts++;\r\n      setTimeout(() => {\r\n        const token = getAuthToken();\r\n        if (token) {\r\n          this.connect(token);\r\n        }\r\n      }, this.reconnectDelay * this.reconnectAttempts);\r\n    }\r\n  }\r\n\r\n  handleMessage(data) {\r\n    const { type, payload } = data;\r\n    \r\n    // Notify listeners based on message type\r\n    if (this.listeners.has(type)) {\r\n      this.listeners.get(type).forEach(callback => callback(payload));\r\n    }\r\n  }\r\n\r\n  subscribe(type, callback) {\r\n    if (!this.listeners.has(type)) {\r\n      this.listeners.set(type, []);\r\n    }\r\n    this.listeners.get(type).push(callback);\r\n\r\n    // Return unsubscribe function\r\n    return () => {\r\n      const callbacks = this.listeners.get(type);\r\n      const index = callbacks.indexOf(callback);\r\n      if (index > -1) {\r\n        callbacks.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.ws) {\r\n      this.ws.close();\r\n      this.ws = null;\r\n    }\r\n  }\r\n}\r\n\r\n// Export WebSocket instance\r\nexport const wsService = new WebSocketService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}