{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AgentContext=/*#__PURE__*/createContext();export const useAgents=()=>{const context=useContext(AgentContext);if(!context){throw new Error('useAgents must be used within an AgentProvider');}return context;};export const AgentProvider=_ref=>{let{children}=_ref;const[agents,setAgents]=useState({context:{status:'active',confidence:0.95},policy:{status:'active',confidence:0.88},negotiation:{status:'active',confidence:0.92},audit:{status:'active',confidence:0.97},'conflict-detection':{status:'active',confidence:0.89},'pre-flight':{status:'active',confidence:0.94},'pattern-recognition':{status:'active',confidence:0.91}});const[status,setStatus]=useState('active');const[activeWorkflows,setActiveWorkflows]=useState([]);const[agentMetrics,setAgentMetrics]=useState({});const[agentInteractions,setAgentInteractions]=useState([]);useEffect(()=>{// Initialize agent metrics\nconst initializeMetrics=()=>{const metrics={};Object.keys(agents).forEach(agentName=>{metrics[agentName]={requestsProcessed:Math.floor(Math.random()*1000)+100,averageResponseTime:Math.floor(Math.random()*500)+50,successRate:Math.floor(Math.random()*20)+80,lastActive:new Date(Date.now()-Math.random()*3600000).toISOString(),errorCount:Math.floor(Math.random()*10),uptime:Math.floor(Math.random()*100)+90};});setAgentMetrics(metrics);};initializeMetrics();// Set up real-time agent monitoring\nconst interval=setInterval(()=>{updateAgentStatuses();},30000);// Update every 30 seconds\nreturn()=>clearInterval(interval);},[]);const updateAgentStatuses=()=>{setAgents(prevAgents=>{const updatedAgents={...prevAgents};Object.keys(updatedAgents).forEach(agentName=>{// Simulate occasional status changes\nif(Math.random()<0.1){const statuses=['active','processing','error'];updatedAgents[agentName].status=statuses[Math.floor(Math.random()*statuses.length)];}// Update confidence slightly\nconst currentConfidence=updatedAgents[agentName].confidence;const change=(Math.random()-0.5)*0.02;// Â±1% change\nupdatedAgents[agentName].confidence=Math.max(0.5,Math.min(1.0,currentConfidence+change));});return updatedAgents;});};const activateAgent=agentName=>{setAgents(prev=>({...prev,[agentName]:{...prev[agentName],status:'active'}}));console.log(`ðŸ¤– Activated agent: ${agentName}`);};const deactivateAgent=agentName=>{setAgents(prev=>({...prev,[agentName]:{...prev[agentName],status:'inactive'}}));console.log(`ðŸ¤– Deactivated agent: ${agentName}`);};const updateAgentConfidence=(agentName,confidence)=>{setAgents(prev=>({...prev,[agentName]:{...prev[agentName],confidence}}));console.log(`ðŸ¤– Updated ${agentName} confidence: ${confidence}`);};const processAgentRequest=async(agentName,request)=>{// Simulate agent processing\nsetAgents(prev=>({...prev,[agentName]:{...prev[agentName],status:'processing'}}));// Simulate processing time\nawait new Promise(resolve=>setTimeout(resolve,1000+Math.random()*2000));// Update agent status and metrics\nsetAgents(prev=>({...prev,[agentName]:{...prev[agentName],status:'active',confidence:Math.min(1.0,prev[agentName].confidence+0.01)}}));// Update metrics\nsetAgentMetrics(prev=>{var _prev$agentName;return{...prev,[agentName]:{...prev[agentName],requestsProcessed:(((_prev$agentName=prev[agentName])===null||_prev$agentName===void 0?void 0:_prev$agentName.requestsProcessed)||0)+1,lastActive:new Date().toISOString()}};});// Log interaction\nconst interaction={id:Date.now(),agentName,request,timestamp:new Date().toISOString(),status:'completed'};setAgentInteractions(prev=>[interaction,...prev.slice(0,49)]);// Keep last 50\nconsole.log(`ðŸ¤– Agent ${agentName} processed request:`,request);return{success:true,result:`Processed by ${agentName}`};};const getAgentStatus=agentName=>{return agents[agentName]||{status:'unknown',confidence:0};};const getAllAgentStatuses=()=>{return agents;};const getSystemHealth=()=>{const activeAgents=Object.values(agents).filter(agent=>agent.status==='active').length;const totalAgents=Object.keys(agents).length;const averageConfidence=Object.values(agents).reduce((sum,agent)=>sum+agent.confidence,0)/totalAgents;return{overallStatus:status,activeAgents,totalAgents,averageConfidence,healthScore:activeAgents/totalAgents*averageConfidence};};const addWorkflow=workflow=>{setActiveWorkflows(prev=>[...prev,workflow]);console.log('ðŸ”„ Added workflow:',workflow);};const removeWorkflow=workflowId=>{setActiveWorkflows(prev=>prev.filter(w=>w.id!==workflowId));console.log('ðŸ”„ Removed workflow:',workflowId);};const getAgentMetrics=agentName=>{return agentMetrics[agentName]||{};};const getAllMetrics=()=>{return agentMetrics;};const getRecentInteractions=function(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;return agentInteractions.slice(0,limit);};const value={agents,status,setStatus,activeWorkflows,agentMetrics,agentInteractions,activateAgent,deactivateAgent,updateAgentConfidence,processAgentRequest,getAgentStatus,getAllAgentStatuses,getSystemHealth,addWorkflow,removeWorkflow,getAgentMetrics,getAllMetrics,getRecentInteractions};return/*#__PURE__*/_jsx(AgentContext.Provider,{value:value,children:children});};export{AgentContext};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","AgentContext","useAgents","context","Error","AgentProvider","_ref","children","agents","setAgents","status","confidence","policy","negotiation","audit","setStatus","activeWorkflows","setActiveWorkflows","agentMetrics","setAgentMetrics","agentInteractions","setAgentInteractions","initializeMetrics","metrics","Object","keys","forEach","agentName","requestsProcessed","Math","floor","random","averageResponseTime","successRate","lastActive","Date","now","toISOString","errorCount","uptime","interval","setInterval","updateAgentStatuses","clearInterval","prevAgents","updatedAgents","statuses","length","currentConfidence","change","max","min","activateAgent","prev","console","log","deactivateAgent","updateAgentConfidence","processAgentRequest","request","Promise","resolve","setTimeout","_prev$agentName","interaction","id","timestamp","slice","success","result","getAgentStatus","getAllAgentStatuses","getSystemHealth","activeAgents","values","filter","agent","totalAgents","averageConfidence","reduce","sum","overallStatus","healthScore","addWorkflow","workflow","removeWorkflow","workflowId","w","getAgentMetrics","getAllMetrics","getRecentInteractions","limit","arguments","undefined","value","Provider"],"sources":["C:/Users/dgtow/intelligent-policy-engine/aicomplyr-intelligence/ui/src/contexts/AgentContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AgentContext = createContext();\r\n\r\nexport const useAgents = () => {\r\n  const context = useContext(AgentContext);\r\n  if (!context) {\r\n    throw new Error('useAgents must be used within an AgentProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AgentProvider = ({ children }) => {\r\n  const [agents, setAgents] = useState({\r\n    context: { status: 'active', confidence: 0.95 },\r\n    policy: { status: 'active', confidence: 0.88 },\r\n    negotiation: { status: 'active', confidence: 0.92 },\r\n    audit: { status: 'active', confidence: 0.97 },\r\n    'conflict-detection': { status: 'active', confidence: 0.89 },\r\n    'pre-flight': { status: 'active', confidence: 0.94 },\r\n    'pattern-recognition': { status: 'active', confidence: 0.91 }\r\n  });\r\n\r\n  const [status, setStatus] = useState('active');\r\n  const [activeWorkflows, setActiveWorkflows] = useState([]);\r\n  const [agentMetrics, setAgentMetrics] = useState({});\r\n  const [agentInteractions, setAgentInteractions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Initialize agent metrics\r\n    const initializeMetrics = () => {\r\n      const metrics = {};\r\n      Object.keys(agents).forEach(agentName => {\r\n        metrics[agentName] = {\r\n          requestsProcessed: Math.floor(Math.random() * 1000) + 100,\r\n          averageResponseTime: Math.floor(Math.random() * 500) + 50,\r\n          successRate: Math.floor(Math.random() * 20) + 80,\r\n          lastActive: new Date(Date.now() - Math.random() * 3600000).toISOString(),\r\n          errorCount: Math.floor(Math.random() * 10),\r\n          uptime: Math.floor(Math.random() * 100) + 90\r\n        };\r\n      });\r\n      setAgentMetrics(metrics);\r\n    };\r\n\r\n    initializeMetrics();\r\n\r\n    // Set up real-time agent monitoring\r\n    const interval = setInterval(() => {\r\n      updateAgentStatuses();\r\n    }, 30000); // Update every 30 seconds\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const updateAgentStatuses = () => {\r\n    setAgents(prevAgents => {\r\n      const updatedAgents = { ...prevAgents };\r\n      Object.keys(updatedAgents).forEach(agentName => {\r\n        // Simulate occasional status changes\r\n        if (Math.random() < 0.1) {\r\n          const statuses = ['active', 'processing', 'error'];\r\n          updatedAgents[agentName].status = statuses[Math.floor(Math.random() * statuses.length)];\r\n        }\r\n        \r\n        // Update confidence slightly\r\n        const currentConfidence = updatedAgents[agentName].confidence;\r\n        const change = (Math.random() - 0.5) * 0.02; // Â±1% change\r\n        updatedAgents[agentName].confidence = Math.max(0.5, Math.min(1.0, currentConfidence + change));\r\n      });\r\n      return updatedAgents;\r\n    });\r\n  };\r\n\r\n  const activateAgent = (agentName) => {\r\n    setAgents(prev => ({\r\n      ...prev,\r\n      [agentName]: { ...prev[agentName], status: 'active' }\r\n    }));\r\n    console.log(`ðŸ¤– Activated agent: ${agentName}`);\r\n  };\r\n\r\n  const deactivateAgent = (agentName) => {\r\n    setAgents(prev => ({\r\n      ...prev,\r\n      [agentName]: { ...prev[agentName], status: 'inactive' }\r\n    }));\r\n    console.log(`ðŸ¤– Deactivated agent: ${agentName}`);\r\n  };\r\n\r\n  const updateAgentConfidence = (agentName, confidence) => {\r\n    setAgents(prev => ({\r\n      ...prev,\r\n      [agentName]: { ...prev[agentName], confidence }\r\n    }));\r\n    console.log(`ðŸ¤– Updated ${agentName} confidence: ${confidence}`);\r\n  };\r\n\r\n  const processAgentRequest = async (agentName, request) => {\r\n    // Simulate agent processing\r\n    setAgents(prev => ({\r\n      ...prev,\r\n      [agentName]: { ...prev[agentName], status: 'processing' }\r\n    }));\r\n\r\n    // Simulate processing time\r\n    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));\r\n\r\n    // Update agent status and metrics\r\n    setAgents(prev => ({\r\n      ...prev,\r\n      [agentName]: { \r\n        ...prev[agentName], \r\n        status: 'active',\r\n        confidence: Math.min(1.0, prev[agentName].confidence + 0.01)\r\n      }\r\n    }));\r\n\r\n    // Update metrics\r\n    setAgentMetrics(prev => ({\r\n      ...prev,\r\n      [agentName]: {\r\n        ...prev[agentName],\r\n        requestsProcessed: (prev[agentName]?.requestsProcessed || 0) + 1,\r\n        lastActive: new Date().toISOString()\r\n      }\r\n    }));\r\n\r\n    // Log interaction\r\n    const interaction = {\r\n      id: Date.now(),\r\n      agentName,\r\n      request,\r\n      timestamp: new Date().toISOString(),\r\n      status: 'completed'\r\n    };\r\n    setAgentInteractions(prev => [interaction, ...prev.slice(0, 49)]); // Keep last 50\r\n\r\n    console.log(`ðŸ¤– Agent ${agentName} processed request:`, request);\r\n    return { success: true, result: `Processed by ${agentName}` };\r\n  };\r\n\r\n  const getAgentStatus = (agentName) => {\r\n    return agents[agentName] || { status: 'unknown', confidence: 0 };\r\n  };\r\n\r\n  const getAllAgentStatuses = () => {\r\n    return agents;\r\n  };\r\n\r\n  const getSystemHealth = () => {\r\n    const activeAgents = Object.values(agents).filter(agent => agent.status === 'active').length;\r\n    const totalAgents = Object.keys(agents).length;\r\n    const averageConfidence = Object.values(agents).reduce((sum, agent) => sum + agent.confidence, 0) / totalAgents;\r\n    \r\n    return {\r\n      overallStatus: status,\r\n      activeAgents,\r\n      totalAgents,\r\n      averageConfidence,\r\n      healthScore: (activeAgents / totalAgents) * averageConfidence\r\n    };\r\n  };\r\n\r\n  const addWorkflow = (workflow) => {\r\n    setActiveWorkflows(prev => [...prev, workflow]);\r\n    console.log('ðŸ”„ Added workflow:', workflow);\r\n  };\r\n\r\n  const removeWorkflow = (workflowId) => {\r\n    setActiveWorkflows(prev => prev.filter(w => w.id !== workflowId));\r\n    console.log('ðŸ”„ Removed workflow:', workflowId);\r\n  };\r\n\r\n  const getAgentMetrics = (agentName) => {\r\n    return agentMetrics[agentName] || {};\r\n  };\r\n\r\n  const getAllMetrics = () => {\r\n    return agentMetrics;\r\n  };\r\n\r\n  const getRecentInteractions = (limit = 10) => {\r\n    return agentInteractions.slice(0, limit);\r\n  };\r\n\r\n  const value = {\r\n    agents,\r\n    status,\r\n    setStatus,\r\n    activeWorkflows,\r\n    agentMetrics,\r\n    agentInteractions,\r\n    activateAgent,\r\n    deactivateAgent,\r\n    updateAgentConfidence,\r\n    processAgentRequest,\r\n    getAgentStatus,\r\n    getAllAgentStatuses,\r\n    getSystemHealth,\r\n    addWorkflow,\r\n    removeWorkflow,\r\n    getAgentMetrics,\r\n    getAllMetrics,\r\n    getRecentInteractions\r\n  };\r\n\r\n  return (\r\n    <AgentContext.Provider value={value}>\r\n      {children}\r\n    </AgentContext.Provider>\r\n  );\r\n};\r\n\r\nexport { AgentContext }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}